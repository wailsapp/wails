// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "/wails/runtime.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * DebugContext logs at level [Debug].
 * @param {string} message
 * @param {any[]} args
 * @returns {Promise<void> & { cancel(): void }}
 */
function DebugContext(message, ...args) {
    let $resultPromise = /** @type {any} */($Call.ByID(1481024990, message, args));
    return $resultPromise;
}

/**
 * ErrorContext logs at level [Error].
 * @param {string} message
 * @param {any[]} args
 * @returns {Promise<void> & { cancel(): void }}
 */
function ErrorContext(message, ...args) {
    let $resultPromise = /** @type {any} */($Call.ByID(4028761057, message, args));
    return $resultPromise;
}

/**
 * InfoContext logs at level [Info].
 * @param {string} message
 * @param {any[]} args
 * @returns {Promise<void> & { cancel(): void }}
 */
function InfoContext(message, ...args) {
    let $resultPromise = /** @type {any} */($Call.ByID(1400061359, message, args));
    return $resultPromise;
}

/**
 * Log emits a log record with the current time and the given level and message.
 * The Record's attributes consist of the Logger's attributes followed by
 * the attributes specified by args.
 * 
 * The attribute arguments are processed as follows:
 *   - If an argument is a string and this is not the last argument,
 *     the following argument is treated as the value and the two are combined
 *     into an attribute.
 *   - Otherwise, the argument is treated as a value with key "!BADKEY".
 * 
 * Log feeds the binding call context into the configured logger,
 * so custom handlers may access context values, e.g. the current window.
 * @param {$models.Level} level
 * @param {string} message
 * @param {any[]} args
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Log(level, message, ...args) {
    let $resultPromise = /** @type {any} */($Call.ByID(4156699346, level, message, args));
    return $resultPromise;
}

/**
 * LogLevel returns the currently configured log level,
 * that is either the one configured initially
 * or the last value passed to [Service.SetLogLevel].
 * @returns {Promise<$models.Level> & { cancel(): void }}
 */
export function LogLevel() {
    let $resultPromise = /** @type {any} */($Call.ByID(4058368160));
    return $resultPromise;
}

/**
 * SetLogLevel changes the current log level.
 * @param {$models.Level} level
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetLogLevel(level) {
    let $resultPromise = /** @type {any} */($Call.ByID(3988219088, level));
    return $resultPromise;
}

/**
 * WarningContext logs at level [Warn].
 * @param {string} message
 * @param {any[]} args
 * @returns {Promise<void> & { cancel(): void }}
 */
function WarningContext(message, ...args) {
    let $resultPromise = /** @type {any} */($Call.ByID(52282975, message, args));
    return $resultPromise;
}

export {
    DebugContext as Debug,
    InfoContext as Info,
    WarningContext as Warning,
    ErrorContext as Error,
};
