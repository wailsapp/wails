// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "/wails/runtime.js";

/**
 * HowDifferent is a curious kind of person
 * that lets other people decide how they are different.
 */
export class HowDifferent<How> {
    /**
     * They have a name as well.
     */
    "Name": string;

    /**
     * But they may have many differences.
     */
    "Differences": { [_: string]: How | null }[];

    /** Creates a new HowDifferent instance. */
    constructor($$source: Partial<HowDifferent<How>> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Differences" in $$source)) {
            this["Differences"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Given creation functions for each type parameter,
     * returns a creation function for a concrete instance
     * of the generic class HowDifferent.
     */
    static createFrom<How>($$createParamHow: (source: any) => How): ($$source?: any) => HowDifferent<How> {
        const $$createField1_0 = $$createType1($$createParamHow);
        return ($$source: any = {}) => {
            let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
            if ("Differences" in $$parsedSource) {
                $$parsedSource["Differences"] = $$createField1_0($$parsedSource["Differences"]);
            }
            return new HowDifferent<How>($$parsedSource as Partial<HowDifferent<How>>);
        };
    }
}

/**
 * Impersonator gets their fields from other people.
 */
export class Impersonator {
    /**
     * They have a name as well.
     */
    "Name": string;

    /**
     * But they may have many differences.
     */
    "Differences": number[];

    /** Creates a new Impersonator instance. */
    constructor($$source: Partial<Impersonator> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Differences" in $$source)) {
            this["Differences"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Impersonator instance from a string or object.
     */
    static createFrom($$source: any = {}): Impersonator {
        const $$createField1_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Differences" in $$parsedSource) {
            $$parsedSource["Differences"] = $$createField1_0($$parsedSource["Differences"]);
        }
        return new Impersonator($$parsedSource as Partial<Impersonator>);
    }
}

/**
 * Person is not a number.
 */
export class Person {
    /**
     * They have a name.
     */
    "Name": string;

    /**
     * Exactly 4 sketchy friends.
     */
    "Friends": Impersonator[];

    /** Creates a new Person instance. */
    constructor($$source: Partial<Person> = {}) {
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Friends" in $$source)) {
            this["Friends"] = Array.from({ length: 4 }, () => (new Impersonator()));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Person instance from a string or object.
     */
    static createFrom($$source: any = {}): Person {
        const $$createField1_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Friends" in $$parsedSource) {
            $$parsedSource["Friends"] = $$createField1_0($$parsedSource["Friends"]);
        }
        return new Person($$parsedSource as Partial<Person>);
    }
}

/**
 * PrivatePerson gets their fields from hidden sources.
 */
export class PrivatePerson {
    /**
     * Nickname conceals a person's identity.
     */
    "Nickname": string;

    /**
     * They have a name.
     */
    "Name": string;

    /**
     * Exactly 4 sketchy friends.
     */
    "Friends": Impersonator[];

    /** Creates a new PrivatePerson instance. */
    constructor($$source: Partial<PrivatePerson> = {}) {
        if (!("Nickname" in $$source)) {
            this["Nickname"] = "";
        }
        if (!("Name" in $$source)) {
            this["Name"] = "";
        }
        if (!("Friends" in $$source)) {
            this["Friends"] = Array.from({ length: 4 }, () => (new Impersonator()));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PrivatePerson instance from a string or object.
     */
    static createFrom($$source: any = {}): PrivatePerson {
        const $$createField2_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Friends" in $$parsedSource) {
            $$parsedSource["Friends"] = $$createField2_0($$parsedSource["Friends"]);
        }
        return new PrivatePerson($$parsedSource as Partial<PrivatePerson>);
    }
}

// Private type creation functions
const $$createType0 = ($$createParamHow) => $Create.Map($Create.Any, $$createParamHow);
const $$createType1 = ($$createParamHow) => $Create.Array($$createType0($$createParamHow));
const $$createType2 = $Create.Array($Create.Any);
const $$createType3 = Impersonator.createFrom;
const $$createType4 = $Create.Array($$createType3);
