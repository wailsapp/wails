// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

import * as GreetService from "./greetservice.js";
export {
    GreetService
};

import * as $models from "./models.js";

/**
 * A nice type Alias.
 * @typedef {$models.Alias} Alias
 */

/**
 * A class whose fields have various aliased types.
 * @typedef {$models.AliasGroup} AliasGroup
 */

/**
 * A struct alias.
 * This should be rendered as a typedef or interface in every mode.
 * @typedef {$models.AliasStruct} AliasStruct
 */

/**
 * A class alias.
 * @typedef {$models.AliasedPerson} AliasedPerson
 */

/**
 * An empty struct alias.
 * @typedef {$models.EmptyAliasStruct} EmptyAliasStruct
 */

/**
 * An empty struct.
 * @typedef {$models.EmptyStruct} EmptyStruct
 */

/**
 * A generic alias that forwards to a type parameter.
 * @template T
 * @typedef {$models.GenericAlias<T>} GenericAlias
 */

/**
 * A generic alias that wraps a map.
 * @template T,U
 * @typedef {$models.GenericMapAlias<T, U>} GenericMapAlias
 */

/**
 * A generic struct containing an alias.
 * @template T
 * @typedef {$models.GenericPerson<T>} GenericPerson
 */

/**
 * A generic alias that wraps a generic struct.
 * @template T
 * @typedef {$models.GenericPersonAlias<T>} GenericPersonAlias
 */

/**
 * A generic alias that wraps a pointer type.
 * @template T
 * @typedef {$models.GenericPtrAlias<T>} GenericPtrAlias
 */

/**
 * An alias that wraps a class through a non-typeparam alias.
 * @typedef {$models.IndirectPersonAlias} IndirectPersonAlias
 */

/**
 * Another struct alias.
 * @typedef {$models.OtherAliasStruct} OtherAliasStruct
 */

/**
 * A non-generic struct containing an alias.
 * @typedef {$models.Person} Person
 */

/**
 * Another class alias, but ordered after its aliased class.
 * @typedef {$models.StrangelyAliasedPerson} StrangelyAliasedPerson
 */

/**
 * An alias that wraps a class through a typeparam alias.
 * @typedef {$models.TPIndirectPersonAlias} TPIndirectPersonAlias
 */
