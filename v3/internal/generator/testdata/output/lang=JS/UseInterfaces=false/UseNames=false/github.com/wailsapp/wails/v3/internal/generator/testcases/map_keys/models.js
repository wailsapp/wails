// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "/wails/runtime.js";

/**
 * @typedef {string} EmbeddedCustomInterface
 */

/**
 * @typedef {string} EmbeddedOriginalInterface
 */

/**
 * @typedef {string} EmbeddedPointer
 */

/**
 * @typedef {string} EmbeddedPointerPtr
 */

/**
 * @typedef {string} EmbeddedValue
 */

/**
 * @typedef {string} EmbeddedValuePtr
 */

/**
 * @template R,S,T,U,V,W,X,Y,Z
 */
export class Maps {
    /**
     * Creates a new Maps instance.
     * @param {Partial<Maps<R, S, T, U, V, W, X, Y, Z>>} [$$source = {}] - The source object to create the Maps.
     */
    constructor($$source = {}) {
        if (!("Bool" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["Bool"] = {};
        }
        if (!("Int" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: `${number}`]: number }}
             */
            this["Int"] = {};
        }
        if (!("Uint" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: `${number}`]: number }}
             */
            this["Uint"] = {};
        }
        if (!("Float" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["Float"] = {};
        }
        if (!("Complex" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["Complex"] = {};
        }
        if (!("Byte" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: `${number}`]: number }}
             */
            this["Byte"] = {};
        }
        if (!("Rune" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: `${number}`]: number }}
             */
            this["Rune"] = {};
        }
        if (!("String" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: string]: number }}
             */
            this["String"] = {};
        }
        if (!("IntPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["IntPtr"] = {};
        }
        if (!("UintPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["UintPtr"] = {};
        }
        if (!("FloatPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["FloatPtr"] = {};
        }
        if (!("ComplexPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["ComplexPtr"] = {};
        }
        if (!("StringPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["StringPtr"] = {};
        }
        if (!("NTM" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["NTM"] = {};
        }
        if (!("NTMPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["NTMPtr"] = {};
        }
        if (!("VTM" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: ValueTextMarshaler]: number }}
             */
            this["VTM"] = {};
        }
        if (!("VTMPtr" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: ValueTextMarshaler]: number }}
             */
            this["VTMPtr"] = {};
        }
        if (!("PTM" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["PTM"] = {};
        }
        if (!("PTMPtr" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: PointerTextMarshaler]: number }}
             */
            this["PTMPtr"] = {};
        }
        if (!("JTM" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["JTM"] = {};
        }
        if (!("JTMPtr" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["JTMPtr"] = {};
        }
        if (!("A" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["A"] = {};
        }
        if (!("APtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["APtr"] = {};
        }
        if (!("TM" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TM"] = {};
        }
        if (!("TMPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TMPtr"] = {};
        }
        if (!("CI" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["CI"] = {};
        }
        if (!("CIPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["CIPtr"] = {};
        }
        if (!("EI" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["EI"] = {};
        }
        if (!("EIPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["EIPtr"] = {};
        }
        if (!("EV" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedValue]: number }}
             */
            this["EV"] = {};
        }
        if (!("EVPtr" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedValue]: number }}
             */
            this["EVPtr"] = {};
        }
        if (!("EVP" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedValuePtr]: number }}
             */
            this["EVP"] = {};
        }
        if (!("EVPPtr" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedValuePtr]: number }}
             */
            this["EVPPtr"] = {};
        }
        if (!("EP" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["EP"] = {};
        }
        if (!("EPPtr" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedPointer]: number }}
             */
            this["EPPtr"] = {};
        }
        if (!("EPP" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedPointerPtr]: number }}
             */
            this["EPP"] = {};
        }
        if (!("EPPPtr" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedPointerPtr]: number }}
             */
            this["EPPPtr"] = {};
        }
        if (!("ECI" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedCustomInterface]: number }}
             */
            this["ECI"] = {};
        }
        if (!("ECIPtr" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedCustomInterface]: number }}
             */
            this["ECIPtr"] = {};
        }
        if (!("EOI" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedOriginalInterface]: number }}
             */
            this["EOI"] = {};
        }
        if (!("EOIPtr" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: EmbeddedOriginalInterface]: number }}
             */
            this["EOIPtr"] = {};
        }
        if (!("WT" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["WT"] = {};
        }
        if (!("WA" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["WA"] = {};
        }
        if (!("ST" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: StringType]: number }}
             */
            this["ST"] = {};
        }
        if (!("SA" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: StringAlias]: number }}
             */
            this["SA"] = {};
        }
        if (!("IntT" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: `${number}`]: number }}
             */
            this["IntT"] = {};
        }
        if (!("IntA" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: `${number}`]: number }}
             */
            this["IntA"] = {};
        }
        if (!("VT" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["VT"] = {};
        }
        if (!("VTPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["VTPtr"] = {};
        }
        if (!("VPT" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["VPT"] = {};
        }
        if (!("VPTPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["VPTPtr"] = {};
        }
        if (!("VA" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: ValueAlias]: number }}
             */
            this["VA"] = {};
        }
        if (!("VAPtr" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: ValueAlias]: number }}
             */
            this["VAPtr"] = {};
        }
        if (!("VPA" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["VPA"] = {};
        }
        if (!("VPAPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["VPAPtr"] = {};
        }
        if (!("PT" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["PT"] = {};
        }
        if (!("PTPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["PTPtr"] = {};
        }
        if (!("PPT" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["PPT"] = {};
        }
        if (!("PPTPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["PPTPtr"] = {};
        }
        if (!("PA" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["PA"] = {};
        }
        if (!("PAPtr" in $$source)) {
            /**
             * Accept
             * @member
             * @type {{ [_: PointerAlias]: number }}
             */
            this["PAPtr"] = {};
        }
        if (!("PPA" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["PPA"] = {};
        }
        if (!("PPAPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["PPAPtr"] = {};
        }
        if (!("IT" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["IT"] = {};
        }
        if (!("ITPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["ITPtr"] = {};
        }
        if (!("IPT" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["IPT"] = {};
        }
        if (!("IPTPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["IPTPtr"] = {};
        }
        if (!("IA" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["IA"] = {};
        }
        if (!("IAPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["IAPtr"] = {};
        }
        if (!("IPA" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["IPA"] = {};
        }
        if (!("IPAPtr" in $$source)) {
            /**
             * Reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["IPAPtr"] = {};
        }
        if (!("TPR" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPR"] = {};
        }
        if (!("TPRPtr" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPRPtr"] = {};
        }
        if (!("TPS" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPS"] = {};
        }
        if (!("TPSPtr" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPSPtr"] = {};
        }
        if (!("TPT" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPT"] = {};
        }
        if (!("TPTPtr" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPTPtr"] = {};
        }
        if (!("TPU" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPU"] = {};
        }
        if (!("TPUPtr" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPUPtr"] = {};
        }
        if (!("TPV" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPV"] = {};
        }
        if (!("TPVPtr" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPVPtr"] = {};
        }
        if (!("TPW" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPW"] = {};
        }
        if (!("TPWPtr" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPWPtr"] = {};
        }
        if (!("TPX" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPX"] = {};
        }
        if (!("TPXPtr" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPXPtr"] = {};
        }
        if (!("TPY" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPY"] = {};
        }
        if (!("TPYPtr" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPYPtr"] = {};
        }
        if (!("TPZ" in $$source)) {
            /**
             * Accept, hide
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPZ"] = {};
        }
        if (!("TPZPtr" in $$source)) {
            /**
             * Soft reject
             * @member
             * @type {{ [_: string]: number }}
             */
            this["TPZPtr"] = {};
        }

        Object.assign(this, $$source);
    }

    /**
     * Given creation functions for each type parameter,
     * returns a creation function for a concrete instance
     * of the generic class Maps.
     * @template R,S,T,U,V,W,X,Y,Z
     * @param {(source: any) => R} $$createParamR
     * @param {(source: any) => S} $$createParamS
     * @param {(source: any) => T} $$createParamT
     * @param {(source: any) => U} $$createParamU
     * @param {(source: any) => V} $$createParamV
     * @param {(source: any) => W} $$createParamW
     * @param {(source: any) => X} $$createParamX
     * @param {(source: any) => Y} $$createParamY
     * @param {(source: any) => Z} $$createParamZ
     * @returns {($$source?: any) => Maps<R, S, T, U, V, W, X, Y, Z>}
     */
    static createFrom($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) {
        const $$createField0_0 = $$createType0;
        const $$createField1_0 = $$createType1;
        const $$createField2_0 = $$createType2;
        const $$createField3_0 = $$createType3;
        const $$createField4_0 = $$createType4;
        const $$createField5_0 = $$createType5;
        const $$createField6_0 = $$createType6;
        const $$createField7_0 = $$createType7;
        const $$createField8_0 = $$createType8;
        const $$createField9_0 = $$createType9;
        const $$createField10_0 = $$createType10;
        const $$createField11_0 = $$createType11;
        const $$createField12_0 = $$createType12;
        const $$createField13_0 = $$createType13;
        const $$createField14_0 = $$createType14;
        const $$createField15_0 = $$createType15;
        const $$createField16_0 = $$createType16;
        const $$createField17_0 = $$createType17;
        const $$createField18_0 = $$createType18;
        const $$createField19_0 = $$createType19;
        const $$createField20_0 = $$createType20;
        const $$createField21_0 = $$createType21;
        const $$createField22_0 = $$createType22;
        const $$createField23_0 = $$createType23;
        const $$createField24_0 = $$createType24;
        const $$createField25_0 = $$createType25;
        const $$createField26_0 = $$createType26;
        const $$createField27_0 = $$createType27;
        const $$createField28_0 = $$createType28;
        const $$createField29_0 = $$createType29;
        const $$createField30_0 = $$createType30;
        const $$createField31_0 = $$createType31;
        const $$createField32_0 = $$createType32;
        const $$createField33_0 = $$createType33;
        const $$createField34_0 = $$createType34;
        const $$createField35_0 = $$createType35;
        const $$createField36_0 = $$createType36;
        const $$createField37_0 = $$createType37;
        const $$createField38_0 = $$createType38;
        const $$createField39_0 = $$createType39;
        const $$createField40_0 = $$createType40;
        const $$createField41_0 = $$createType41;
        const $$createField42_0 = $$createType0;
        const $$createField43_0 = $$createType42;
        const $$createField44_0 = $$createType7;
        const $$createField45_0 = $$createType43;
        const $$createField46_0 = $$createType1;
        const $$createField47_0 = $$createType44;
        const $$createField48_0 = $$createType45;
        const $$createField49_0 = $$createType46;
        const $$createField50_0 = $$createType47;
        const $$createField51_0 = $$createType15;
        const $$createField52_0 = $$createType16;
        const $$createField53_0 = $$createType16;
        const $$createField54_0 = $$createType48;
        const $$createField55_0 = $$createType49;
        const $$createField56_0 = $$createType50;
        const $$createField57_0 = $$createType51;
        const $$createField58_0 = $$createType52;
        const $$createField59_0 = $$createType17;
        const $$createField60_0 = $$createType18;
        const $$createField61_0 = $$createType18;
        const $$createField62_0 = $$createType53;
        const $$createField63_0 = $$createType54;
        const $$createField64_0 = $$createType55;
        const $$createField65_0 = $$createType56;
        const $$createField66_0 = $$createType57;
        const $$createField67_0 = $$createType23;
        const $$createField68_0 = $$createType24;
        const $$createField69_0 = $$createType24;
        const $$createField70_0 = $$createType58;
        const $$createField71_0 = $$createType59($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField72_0 = $$createType60($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField73_0 = $$createType61($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField74_0 = $$createType62($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField75_0 = $$createType63($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField76_0 = $$createType64($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField77_0 = $$createType65($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField78_0 = $$createType66($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField79_0 = $$createType67($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField80_0 = $$createType68($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField81_0 = $$createType69($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField82_0 = $$createType70($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField83_0 = $$createType71($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField84_0 = $$createType72($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField85_0 = $$createType73($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField86_0 = $$createType74($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField87_0 = $$createType75($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        const $$createField88_0 = $$createType76($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ);
        return ($$source = {}) => {
            let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
            if ("Bool" in $$parsedSource) {
                $$parsedSource["Bool"] = $$createField0_0($$parsedSource["Bool"]);
            }
            if ("Int" in $$parsedSource) {
                $$parsedSource["Int"] = $$createField1_0($$parsedSource["Int"]);
            }
            if ("Uint" in $$parsedSource) {
                $$parsedSource["Uint"] = $$createField2_0($$parsedSource["Uint"]);
            }
            if ("Float" in $$parsedSource) {
                $$parsedSource["Float"] = $$createField3_0($$parsedSource["Float"]);
            }
            if ("Complex" in $$parsedSource) {
                $$parsedSource["Complex"] = $$createField4_0($$parsedSource["Complex"]);
            }
            if ("Byte" in $$parsedSource) {
                $$parsedSource["Byte"] = $$createField5_0($$parsedSource["Byte"]);
            }
            if ("Rune" in $$parsedSource) {
                $$parsedSource["Rune"] = $$createField6_0($$parsedSource["Rune"]);
            }
            if ("String" in $$parsedSource) {
                $$parsedSource["String"] = $$createField7_0($$parsedSource["String"]);
            }
            if ("IntPtr" in $$parsedSource) {
                $$parsedSource["IntPtr"] = $$createField8_0($$parsedSource["IntPtr"]);
            }
            if ("UintPtr" in $$parsedSource) {
                $$parsedSource["UintPtr"] = $$createField9_0($$parsedSource["UintPtr"]);
            }
            if ("FloatPtr" in $$parsedSource) {
                $$parsedSource["FloatPtr"] = $$createField10_0($$parsedSource["FloatPtr"]);
            }
            if ("ComplexPtr" in $$parsedSource) {
                $$parsedSource["ComplexPtr"] = $$createField11_0($$parsedSource["ComplexPtr"]);
            }
            if ("StringPtr" in $$parsedSource) {
                $$parsedSource["StringPtr"] = $$createField12_0($$parsedSource["StringPtr"]);
            }
            if ("NTM" in $$parsedSource) {
                $$parsedSource["NTM"] = $$createField13_0($$parsedSource["NTM"]);
            }
            if ("NTMPtr" in $$parsedSource) {
                $$parsedSource["NTMPtr"] = $$createField14_0($$parsedSource["NTMPtr"]);
            }
            if ("VTM" in $$parsedSource) {
                $$parsedSource["VTM"] = $$createField15_0($$parsedSource["VTM"]);
            }
            if ("VTMPtr" in $$parsedSource) {
                $$parsedSource["VTMPtr"] = $$createField16_0($$parsedSource["VTMPtr"]);
            }
            if ("PTM" in $$parsedSource) {
                $$parsedSource["PTM"] = $$createField17_0($$parsedSource["PTM"]);
            }
            if ("PTMPtr" in $$parsedSource) {
                $$parsedSource["PTMPtr"] = $$createField18_0($$parsedSource["PTMPtr"]);
            }
            if ("JTM" in $$parsedSource) {
                $$parsedSource["JTM"] = $$createField19_0($$parsedSource["JTM"]);
            }
            if ("JTMPtr" in $$parsedSource) {
                $$parsedSource["JTMPtr"] = $$createField20_0($$parsedSource["JTMPtr"]);
            }
            if ("A" in $$parsedSource) {
                $$parsedSource["A"] = $$createField21_0($$parsedSource["A"]);
            }
            if ("APtr" in $$parsedSource) {
                $$parsedSource["APtr"] = $$createField22_0($$parsedSource["APtr"]);
            }
            if ("TM" in $$parsedSource) {
                $$parsedSource["TM"] = $$createField23_0($$parsedSource["TM"]);
            }
            if ("TMPtr" in $$parsedSource) {
                $$parsedSource["TMPtr"] = $$createField24_0($$parsedSource["TMPtr"]);
            }
            if ("CI" in $$parsedSource) {
                $$parsedSource["CI"] = $$createField25_0($$parsedSource["CI"]);
            }
            if ("CIPtr" in $$parsedSource) {
                $$parsedSource["CIPtr"] = $$createField26_0($$parsedSource["CIPtr"]);
            }
            if ("EI" in $$parsedSource) {
                $$parsedSource["EI"] = $$createField27_0($$parsedSource["EI"]);
            }
            if ("EIPtr" in $$parsedSource) {
                $$parsedSource["EIPtr"] = $$createField28_0($$parsedSource["EIPtr"]);
            }
            if ("EV" in $$parsedSource) {
                $$parsedSource["EV"] = $$createField29_0($$parsedSource["EV"]);
            }
            if ("EVPtr" in $$parsedSource) {
                $$parsedSource["EVPtr"] = $$createField30_0($$parsedSource["EVPtr"]);
            }
            if ("EVP" in $$parsedSource) {
                $$parsedSource["EVP"] = $$createField31_0($$parsedSource["EVP"]);
            }
            if ("EVPPtr" in $$parsedSource) {
                $$parsedSource["EVPPtr"] = $$createField32_0($$parsedSource["EVPPtr"]);
            }
            if ("EP" in $$parsedSource) {
                $$parsedSource["EP"] = $$createField33_0($$parsedSource["EP"]);
            }
            if ("EPPtr" in $$parsedSource) {
                $$parsedSource["EPPtr"] = $$createField34_0($$parsedSource["EPPtr"]);
            }
            if ("EPP" in $$parsedSource) {
                $$parsedSource["EPP"] = $$createField35_0($$parsedSource["EPP"]);
            }
            if ("EPPPtr" in $$parsedSource) {
                $$parsedSource["EPPPtr"] = $$createField36_0($$parsedSource["EPPPtr"]);
            }
            if ("ECI" in $$parsedSource) {
                $$parsedSource["ECI"] = $$createField37_0($$parsedSource["ECI"]);
            }
            if ("ECIPtr" in $$parsedSource) {
                $$parsedSource["ECIPtr"] = $$createField38_0($$parsedSource["ECIPtr"]);
            }
            if ("EOI" in $$parsedSource) {
                $$parsedSource["EOI"] = $$createField39_0($$parsedSource["EOI"]);
            }
            if ("EOIPtr" in $$parsedSource) {
                $$parsedSource["EOIPtr"] = $$createField40_0($$parsedSource["EOIPtr"]);
            }
            if ("WT" in $$parsedSource) {
                $$parsedSource["WT"] = $$createField41_0($$parsedSource["WT"]);
            }
            if ("WA" in $$parsedSource) {
                $$parsedSource["WA"] = $$createField42_0($$parsedSource["WA"]);
            }
            if ("ST" in $$parsedSource) {
                $$parsedSource["ST"] = $$createField43_0($$parsedSource["ST"]);
            }
            if ("SA" in $$parsedSource) {
                $$parsedSource["SA"] = $$createField44_0($$parsedSource["SA"]);
            }
            if ("IntT" in $$parsedSource) {
                $$parsedSource["IntT"] = $$createField45_0($$parsedSource["IntT"]);
            }
            if ("IntA" in $$parsedSource) {
                $$parsedSource["IntA"] = $$createField46_0($$parsedSource["IntA"]);
            }
            if ("VT" in $$parsedSource) {
                $$parsedSource["VT"] = $$createField47_0($$parsedSource["VT"]);
            }
            if ("VTPtr" in $$parsedSource) {
                $$parsedSource["VTPtr"] = $$createField48_0($$parsedSource["VTPtr"]);
            }
            if ("VPT" in $$parsedSource) {
                $$parsedSource["VPT"] = $$createField49_0($$parsedSource["VPT"]);
            }
            if ("VPTPtr" in $$parsedSource) {
                $$parsedSource["VPTPtr"] = $$createField50_0($$parsedSource["VPTPtr"]);
            }
            if ("VA" in $$parsedSource) {
                $$parsedSource["VA"] = $$createField51_0($$parsedSource["VA"]);
            }
            if ("VAPtr" in $$parsedSource) {
                $$parsedSource["VAPtr"] = $$createField52_0($$parsedSource["VAPtr"]);
            }
            if ("VPA" in $$parsedSource) {
                $$parsedSource["VPA"] = $$createField53_0($$parsedSource["VPA"]);
            }
            if ("VPAPtr" in $$parsedSource) {
                $$parsedSource["VPAPtr"] = $$createField54_0($$parsedSource["VPAPtr"]);
            }
            if ("PT" in $$parsedSource) {
                $$parsedSource["PT"] = $$createField55_0($$parsedSource["PT"]);
            }
            if ("PTPtr" in $$parsedSource) {
                $$parsedSource["PTPtr"] = $$createField56_0($$parsedSource["PTPtr"]);
            }
            if ("PPT" in $$parsedSource) {
                $$parsedSource["PPT"] = $$createField57_0($$parsedSource["PPT"]);
            }
            if ("PPTPtr" in $$parsedSource) {
                $$parsedSource["PPTPtr"] = $$createField58_0($$parsedSource["PPTPtr"]);
            }
            if ("PA" in $$parsedSource) {
                $$parsedSource["PA"] = $$createField59_0($$parsedSource["PA"]);
            }
            if ("PAPtr" in $$parsedSource) {
                $$parsedSource["PAPtr"] = $$createField60_0($$parsedSource["PAPtr"]);
            }
            if ("PPA" in $$parsedSource) {
                $$parsedSource["PPA"] = $$createField61_0($$parsedSource["PPA"]);
            }
            if ("PPAPtr" in $$parsedSource) {
                $$parsedSource["PPAPtr"] = $$createField62_0($$parsedSource["PPAPtr"]);
            }
            if ("IT" in $$parsedSource) {
                $$parsedSource["IT"] = $$createField63_0($$parsedSource["IT"]);
            }
            if ("ITPtr" in $$parsedSource) {
                $$parsedSource["ITPtr"] = $$createField64_0($$parsedSource["ITPtr"]);
            }
            if ("IPT" in $$parsedSource) {
                $$parsedSource["IPT"] = $$createField65_0($$parsedSource["IPT"]);
            }
            if ("IPTPtr" in $$parsedSource) {
                $$parsedSource["IPTPtr"] = $$createField66_0($$parsedSource["IPTPtr"]);
            }
            if ("IA" in $$parsedSource) {
                $$parsedSource["IA"] = $$createField67_0($$parsedSource["IA"]);
            }
            if ("IAPtr" in $$parsedSource) {
                $$parsedSource["IAPtr"] = $$createField68_0($$parsedSource["IAPtr"]);
            }
            if ("IPA" in $$parsedSource) {
                $$parsedSource["IPA"] = $$createField69_0($$parsedSource["IPA"]);
            }
            if ("IPAPtr" in $$parsedSource) {
                $$parsedSource["IPAPtr"] = $$createField70_0($$parsedSource["IPAPtr"]);
            }
            if ("TPR" in $$parsedSource) {
                $$parsedSource["TPR"] = $$createField71_0($$parsedSource["TPR"]);
            }
            if ("TPRPtr" in $$parsedSource) {
                $$parsedSource["TPRPtr"] = $$createField72_0($$parsedSource["TPRPtr"]);
            }
            if ("TPS" in $$parsedSource) {
                $$parsedSource["TPS"] = $$createField73_0($$parsedSource["TPS"]);
            }
            if ("TPSPtr" in $$parsedSource) {
                $$parsedSource["TPSPtr"] = $$createField74_0($$parsedSource["TPSPtr"]);
            }
            if ("TPT" in $$parsedSource) {
                $$parsedSource["TPT"] = $$createField75_0($$parsedSource["TPT"]);
            }
            if ("TPTPtr" in $$parsedSource) {
                $$parsedSource["TPTPtr"] = $$createField76_0($$parsedSource["TPTPtr"]);
            }
            if ("TPU" in $$parsedSource) {
                $$parsedSource["TPU"] = $$createField77_0($$parsedSource["TPU"]);
            }
            if ("TPUPtr" in $$parsedSource) {
                $$parsedSource["TPUPtr"] = $$createField78_0($$parsedSource["TPUPtr"]);
            }
            if ("TPV" in $$parsedSource) {
                $$parsedSource["TPV"] = $$createField79_0($$parsedSource["TPV"]);
            }
            if ("TPVPtr" in $$parsedSource) {
                $$parsedSource["TPVPtr"] = $$createField80_0($$parsedSource["TPVPtr"]);
            }
            if ("TPW" in $$parsedSource) {
                $$parsedSource["TPW"] = $$createField81_0($$parsedSource["TPW"]);
            }
            if ("TPWPtr" in $$parsedSource) {
                $$parsedSource["TPWPtr"] = $$createField82_0($$parsedSource["TPWPtr"]);
            }
            if ("TPX" in $$parsedSource) {
                $$parsedSource["TPX"] = $$createField83_0($$parsedSource["TPX"]);
            }
            if ("TPXPtr" in $$parsedSource) {
                $$parsedSource["TPXPtr"] = $$createField84_0($$parsedSource["TPXPtr"]);
            }
            if ("TPY" in $$parsedSource) {
                $$parsedSource["TPY"] = $$createField85_0($$parsedSource["TPY"]);
            }
            if ("TPYPtr" in $$parsedSource) {
                $$parsedSource["TPYPtr"] = $$createField86_0($$parsedSource["TPYPtr"]);
            }
            if ("TPZ" in $$parsedSource) {
                $$parsedSource["TPZ"] = $$createField87_0($$parsedSource["TPZ"]);
            }
            if ("TPZPtr" in $$parsedSource) {
                $$parsedSource["TPZPtr"] = $$createField88_0($$parsedSource["TPZPtr"]);
            }
            return new Maps(/** @type {Partial<Maps<R, S, T, U, V, W, X, Y, Z>>} */($$parsedSource));
        };
    }
}

/**
 * @typedef {PointerTextMarshaler} PointerAlias
 */

/**
 * @typedef {string} PointerTextMarshaler
 */

/**
 * @typedef {string} StringAlias
 */

/**
 * @typedef {string} StringType
 */

/**
 * @typedef {ValueTextMarshaler} ValueAlias
 */

/**
 * @typedef {string} ValueTextMarshaler
 */

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
const $$createType1 = $Create.Map($Create.Any, $Create.Any);
const $$createType2 = $Create.Map($Create.Any, $Create.Any);
const $$createType3 = $Create.Map($Create.Any, $Create.Any);
const $$createType4 = $Create.Map($Create.Any, $Create.Any);
const $$createType5 = $Create.Map($Create.Any, $Create.Any);
const $$createType6 = $Create.Map($Create.Any, $Create.Any);
const $$createType7 = $Create.Map($Create.Any, $Create.Any);
const $$createType8 = $Create.Map($Create.Any, $Create.Any);
const $$createType9 = $Create.Map($Create.Any, $Create.Any);
const $$createType10 = $Create.Map($Create.Any, $Create.Any);
const $$createType11 = $Create.Map($Create.Any, $Create.Any);
const $$createType12 = $Create.Map($Create.Any, $Create.Any);
const $$createType13 = $Create.Map($Create.Any, $Create.Any);
const $$createType14 = $Create.Map($Create.Any, $Create.Any);
const $$createType15 = $Create.Map($Create.Any, $Create.Any);
const $$createType16 = $Create.Map($Create.Any, $Create.Any);
const $$createType17 = $Create.Map($Create.Any, $Create.Any);
const $$createType18 = $Create.Map($Create.Any, $Create.Any);
const $$createType19 = $Create.Map($Create.Any, $Create.Any);
const $$createType20 = $Create.Map($Create.Any, $Create.Any);
const $$createType21 = $Create.Map($Create.Any, $Create.Any);
const $$createType22 = $Create.Map($Create.Any, $Create.Any);
const $$createType23 = $Create.Map($Create.Any, $Create.Any);
const $$createType24 = $Create.Map($Create.Any, $Create.Any);
const $$createType25 = $Create.Map($Create.Any, $Create.Any);
const $$createType26 = $Create.Map($Create.Any, $Create.Any);
const $$createType27 = $Create.Map($Create.Any, $Create.Any);
const $$createType28 = $Create.Map($Create.Any, $Create.Any);
const $$createType29 = $Create.Map($Create.Any, $Create.Any);
const $$createType30 = $Create.Map($Create.Any, $Create.Any);
const $$createType31 = $Create.Map($Create.Any, $Create.Any);
const $$createType32 = $Create.Map($Create.Any, $Create.Any);
const $$createType33 = $Create.Map($Create.Any, $Create.Any);
const $$createType34 = $Create.Map($Create.Any, $Create.Any);
const $$createType35 = $Create.Map($Create.Any, $Create.Any);
const $$createType36 = $Create.Map($Create.Any, $Create.Any);
const $$createType37 = $Create.Map($Create.Any, $Create.Any);
const $$createType38 = $Create.Map($Create.Any, $Create.Any);
const $$createType39 = $Create.Map($Create.Any, $Create.Any);
const $$createType40 = $Create.Map($Create.Any, $Create.Any);
const $$createType41 = $Create.Map($Create.Any, $Create.Any);
const $$createType42 = $Create.Map($Create.Any, $Create.Any);
const $$createType43 = $Create.Map($Create.Any, $Create.Any);
const $$createType44 = $Create.Map($Create.Any, $Create.Any);
const $$createType45 = $Create.Map($Create.Any, $Create.Any);
const $$createType46 = $Create.Map($Create.Any, $Create.Any);
const $$createType47 = $Create.Map($Create.Any, $Create.Any);
const $$createType48 = $Create.Map($Create.Any, $Create.Any);
const $$createType49 = $Create.Map($Create.Any, $Create.Any);
const $$createType50 = $Create.Map($Create.Any, $Create.Any);
const $$createType51 = $Create.Map($Create.Any, $Create.Any);
const $$createType52 = $Create.Map($Create.Any, $Create.Any);
const $$createType53 = $Create.Map($Create.Any, $Create.Any);
const $$createType54 = $Create.Map($Create.Any, $Create.Any);
const $$createType55 = $Create.Map($Create.Any, $Create.Any);
const $$createType56 = $Create.Map($Create.Any, $Create.Any);
const $$createType57 = $Create.Map($Create.Any, $Create.Any);
const $$createType58 = $Create.Map($Create.Any, $Create.Any);
const $$createType59 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType60 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType61 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType62 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType63 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType64 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType65 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType66 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType67 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType68 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType69 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType70 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType71 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType72 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType73 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType74 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType75 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
const $$createType76 = ($$createParamR, $$createParamS, $$createParamT, $$createParamU, $$createParamV, $$createParamW, $$createParamX, $$createParamY, $$createParamZ) => $Create.Map($Create.Any, $Create.Any);
