// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "/wails/runtime.js";

/**
 * A nice type Alias.
 * @typedef {number} Alias
 */

/**
 * A class whose fields have various aliased types.
 */
export class AliasGroup {
    /**
     * Creates a new AliasGroup instance.
     * @param {Partial<AliasGroup>} [$$source = {}] - The source object to create the AliasGroup.
     */
    constructor($$source = {}) {
        if (!("GAi" in $$source)) {
            /**
             * @member
             * @type {GenericAlias<number>}
             */
            this["GAi"] = 0;
        }
        if (!("GAP" in $$source)) {
            /**
             * @member
             * @type {GenericAlias<GenericPerson<boolean>>}
             */
            this["GAP"] = (new GenericPerson());
        }
        if (!("GPAs" in $$source)) {
            /**
             * @member
             * @type {GenericPtrAlias<string[]>}
             */
            this["GPAs"] = null;
        }
        if (!("GPAP" in $$source)) {
            /**
             * @member
             * @type {GenericPtrAlias<GenericPerson<number[]>>}
             */
            this["GPAP"] = null;
        }
        if (!("GMA" in $$source)) {
            /**
             * @member
             * @type {GenericMapAlias<string, number>}
             */
            this["GMA"] = {};
        }
        if (!("GPA" in $$source)) {
            /**
             * @member
             * @type {GenericPersonAlias<boolean>}
             */
            this["GPA"] = (new GenericPersonAlias());
        }
        if (!("IPA" in $$source)) {
            /**
             * @member
             * @type {IndirectPersonAlias}
             */
            this["IPA"] = (new IndirectPersonAlias());
        }
        if (!("TPIPA" in $$source)) {
            /**
             * @member
             * @type {TPIndirectPersonAlias}
             */
            this["TPIPA"] = (new TPIndirectPersonAlias());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AliasGroup instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AliasGroup}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType0;
        const $$createField2_0 = $$createType2;
        const $$createField3_0 = $$createType5;
        const $$createField4_0 = $$createType6;
        const $$createField5_0 = $$createType8;
        const $$createField6_0 = $$createType8;
        const $$createField7_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("GAP" in $$parsedSource) {
            $$parsedSource["GAP"] = $$createField1_0($$parsedSource["GAP"]);
        }
        if ("GPAs" in $$parsedSource) {
            $$parsedSource["GPAs"] = $$createField2_0($$parsedSource["GPAs"]);
        }
        if ("GPAP" in $$parsedSource) {
            $$parsedSource["GPAP"] = $$createField3_0($$parsedSource["GPAP"]);
        }
        if ("GMA" in $$parsedSource) {
            $$parsedSource["GMA"] = $$createField4_0($$parsedSource["GMA"]);
        }
        if ("GPA" in $$parsedSource) {
            $$parsedSource["GPA"] = $$createField5_0($$parsedSource["GPA"]);
        }
        if ("IPA" in $$parsedSource) {
            $$parsedSource["IPA"] = $$createField6_0($$parsedSource["IPA"]);
        }
        if ("TPIPA" in $$parsedSource) {
            $$parsedSource["TPIPA"] = $$createField7_0($$parsedSource["TPIPA"]);
        }
        return new AliasGroup(/** @type {Partial<AliasGroup>} */($$parsedSource));
    }
}

/**
 * A struct alias.
 * This should be rendered as a typedef or interface in every mode.
 * @typedef {Object} AliasStruct
 * @property {number[]} Foo - A field with a comment.
 * @property {string} [Bar] - Definitely not Foo.
 * @property {string} [Baz] - Definitely not Foo.
 * @property {OtherAliasStruct} Other - A nested alias struct.
 */

/**
 * An empty struct alias.
 * @typedef { {
 * } } EmptyAliasStruct
 */

/**
 * An empty struct.
 */
export class EmptyStruct {
    /**
     * Creates a new EmptyStruct instance.
     * @param {Partial<EmptyStruct>} [$$source = {}] - The source object to create the EmptyStruct.
     */
    constructor($$source = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new EmptyStruct instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {EmptyStruct}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new EmptyStruct(/** @type {Partial<EmptyStruct>} */($$parsedSource));
    }
}

/**
 * A generic alias that forwards to a type parameter.
 * @template T
 * @typedef {T} GenericAlias
 */

/**
 * A generic alias that wraps a map.
 * @template T,U
 * @typedef {{ [_: string]: U }} GenericMapAlias
 */

/**
 * A generic struct containing an alias.
 * @template T
 */
export class GenericPerson {
    /**
     * Creates a new GenericPerson instance.
     * @param {Partial<GenericPerson<T>>} [$$source = {}] - The source object to create the GenericPerson.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {T | undefined}
             */
            this["Name"] = undefined;
        }
        if (!("AliasedField" in $$source)) {
            /**
             * @member
             * @type {Alias}
             */
            this["AliasedField"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Given creation functions for each type parameter,
     * returns a creation function for a concrete instance
     * of the generic class GenericPerson.
     * @template [T=any]
     * @param {(source: any) => T} $$createParamT
     * @returns {($$source?: any) => GenericPerson<T>}
     */
    static createFrom($$createParamT) {
        const $$createField0_0 = $$createParamT;
        return ($$source = {}) => {
            let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
            if ("Name" in $$parsedSource) {
                $$parsedSource["Name"] = $$createField0_0($$parsedSource["Name"]);
            }
            return new GenericPerson(/** @type {Partial<GenericPerson<T>>} */($$parsedSource));
        };
    }
}

/**
 * A generic alias that wraps a generic struct.
 */
export const GenericPersonAlias = GenericPerson;

/**
 * A generic alias that wraps a generic struct.
 * @template T
 * @typedef {GenericPerson<GenericPtrAlias<T>[]>} GenericPersonAlias
 */

/**
 * A generic alias that wraps a pointer type.
 * @template T
 * @typedef {GenericAlias<T> | null} GenericPtrAlias
 */

/**
 * An alias that wraps a class through a non-typeparam alias.
 */
export const IndirectPersonAlias = GenericPersonAlias;

/**
 * An alias that wraps a class through a non-typeparam alias.
 * @typedef {GenericPersonAlias<boolean>} IndirectPersonAlias
 */

/**
 * Another struct alias.
 * @typedef {Object} OtherAliasStruct
 * @property {number[]} NoMoreIdeas
 */

/**
 * A non-generic struct containing an alias.
 */
export class Person {
    /**
     * Creates a new Person instance.
     * @param {Partial<Person>} [$$source = {}] - The source object to create the Person.
     */
    constructor($$source = {}) {
        if (!("Name" in $$source)) {
            /**
             * The Person's name.
             * @member
             * @type {string}
             */
            this["Name"] = "";
        }
        if (!("AliasedField" in $$source)) {
            /**
             * A random alias field.
             * @member
             * @type {Alias}
             */
            this["AliasedField"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Person instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Person}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Person(/** @type {Partial<Person>} */($$parsedSource));
    }
}

/**
 * A class alias.
 */
export const AliasedPerson = Person;

/**
 * A class alias.
 * @typedef {Person} AliasedPerson
 */

/**
 * Another class alias, but ordered after its aliased class.
 */
export const StrangelyAliasedPerson = Person;

/**
 * Another class alias, but ordered after its aliased class.
 * @typedef {Person} StrangelyAliasedPerson
 */

/**
 * An alias that wraps a class through a typeparam alias.
 */
export const TPIndirectPersonAlias = GenericPerson;

/**
 * An alias that wraps a class through a typeparam alias.
 * @typedef {GenericAlias<GenericPerson<boolean>>} TPIndirectPersonAlias
 */

// Private type creation functions
const $$createType0 = GenericPerson.createFrom($Create.Any);
const $$createType1 = $Create.Array($Create.Any);
const $$createType2 = $Create.Nullable($$createType1);
const $$createType3 = $Create.Array($Create.Any);
const $$createType4 = GenericPerson.createFrom($$createType3);
const $$createType5 = $Create.Nullable($$createType4);
const $$createType6 = $Create.Map($Create.Any, $Create.Any);
const $$createType7 = $Create.Array($Create.Any);
const $$createType8 = GenericPerson.createFrom($$createType7);
