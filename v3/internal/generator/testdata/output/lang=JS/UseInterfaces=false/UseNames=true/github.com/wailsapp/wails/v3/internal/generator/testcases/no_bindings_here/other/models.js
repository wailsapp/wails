// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "/wails/runtime.js";

/**
 * OtherPerson is like a person, but different.
 * @template T
 */
export class OtherPerson {
    /**
     * Creates a new OtherPerson instance.
     * @param {Partial<OtherPerson<T>>} [$$source = {}] - The source object to create the OtherPerson.
     */
    constructor($$source = {}) {
        if (!("Name" in $$source)) {
            /**
             * They have a name as well.
             * @member
             * @type {string}
             */
            this["Name"] = "";
        }
        if (!("Differences" in $$source)) {
            /**
             * But they may have many differences.
             * @member
             * @type {(T | null)[]}
             */
            this["Differences"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Given creation functions for each type parameter,
     * returns a creation function for a concrete instance
     * of the generic class OtherPerson.
     * @template T
     * @param {(source: any) => T} $$createParamT
     * @returns {($$source?: any) => OtherPerson<T>}
     */
    static createFrom($$createParamT) {
        const $$createField1_0 = $$createType0($$createParamT);
        return ($$source = {}) => {
            let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
            if ("Differences" in $$parsedSource) {
                $$parsedSource["Differences"] = $$createField1_0($$parsedSource["Differences"]);
            }
            return new OtherPerson(/** @type {Partial<OtherPerson<T>>} */($$parsedSource));
        };
    }
}

// Private type creation functions
const $$createType0 = ($$createParamT) => $Create.Array($$createParamT);
