// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "/wails/runtime.js";

export class StructA {
    /**
     * Creates a new StructA instance.
     * @param {Partial<StructA>} [$$source = {}] - The source object to create the StructA.
     */
    constructor($$source = {}) {
        if (!("B" in $$source)) {
            /**
             * @member
             * @type {structB | null}
             */
            this["B"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new StructA instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {StructA}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("B" in $$parsedSource) {
            $$parsedSource["B"] = $$createField0_0($$parsedSource["B"]);
        }
        return new StructA(/** @type {Partial<StructA>} */($$parsedSource));
    }
}

export class StructC {
    /**
     * Creates a new StructC instance.
     * @param {Partial<StructC>} [$$source = {}] - The source object to create the StructC.
     */
    constructor($$source = {}) {
        if (!("D" in $$source)) {
            /**
             * @member
             * @type {structD}
             */
            this["D"] = (new structD());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new StructC instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {StructC}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("D" in $$parsedSource) {
            $$parsedSource["D"] = $$createField0_0($$parsedSource["D"]);
        }
        return new StructC(/** @type {Partial<StructC>} */($$parsedSource));
    }
}

export class StructE {
    /**
     * Creates a new StructE instance.
     * @param {Partial<StructE>} [$$source = {}] - The source object to create the StructE.
     */
    constructor($$source = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new StructE instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {StructE}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new StructE(/** @type {Partial<StructE>} */($$parsedSource));
    }
}

export class structB {
    /**
     * Creates a new structB instance.
     * @param {Partial<structB>} [$$source = {}] - The source object to create the structB.
     */
    constructor($$source = {}) {
        if (!("A" in $$source)) {
            /**
             * @member
             * @type {StructA | null}
             */
            this["A"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new structB instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {structB}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("A" in $$parsedSource) {
            $$parsedSource["A"] = $$createField0_0($$parsedSource["A"]);
        }
        return new structB(/** @type {Partial<structB>} */($$parsedSource));
    }
}

export class structD {
    /**
     * Creates a new structD instance.
     * @param {Partial<structD>} [$$source = {}] - The source object to create the structD.
     */
    constructor($$source = {}) {
        if (!("E" in $$source)) {
            /**
             * @member
             * @type {StructE}
             */
            this["E"] = (new StructE());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new structD instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {structD}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("E" in $$parsedSource) {
            $$parsedSource["E"] = $$createField0_0($$parsedSource["E"]);
        }
        return new structD(/** @type {Partial<structD>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = structB.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = structD.createFrom;
const $$createType3 = StructA.createFrom;
const $$createType4 = $Create.Nullable($$createType3);
const $$createType5 = StructE.createFrom;
