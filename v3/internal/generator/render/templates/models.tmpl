{{$renderer := .}}
{{- $useInterfaces := .UseInterfaces}}
{{- $internal := (fixext .InternalFile)}}
{{- if not .TS -}}
// @ts-check
{{end -}}
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

{{- $hasObjects := false}}
{{- $hasTypes := false}}

{{- range $model := .Models}}
{{- if not $model.Object.Exported}}{{break}}{{end}}

{{- $isEnum := $model.Values}}
{{- $isClassAlias := and $model.Type (not $useInterfaces) (isclass $model.Type)}}
{{- $isClass := and (not $model.Type) (not $model.Values) (not $useInterfaces) (not $model.Alias)}}

{{- if or $isEnum $isClassAlias $isClass}}
{{- if not $hasObjects}}
    {{- $hasObjects = true}}

export {
{{- else}},{{end}}
    {{jsid $model.Name}}
{{- else}}
    {{- $hasTypes = true}}
{{- end}}
{{- end}}
{{- if $hasObjects}}
} from "./{{js $internal}}";
{{- end}}

{{- if $hasTypes}}
{{- $hasTypes = false}}

{{if .TS -}}
export type {
{{- else -}}
import * as $models from "./{{js $internal}}";
{{- end}}
{{- range $model := .Models}}
{{- if not $model.Object.Exported}}{{break}}{{end}}

{{- $isEnum := $model.Values}}
{{- $isClassAlias := and $model.Type (not $useInterfaces) (isclass $model.Type)}}
{{- $isClass := and (not $model.Type) (not $model.Values) (not $useInterfaces) (not $model.Alias)}}
{{- if or $isEnum $isClassAlias $isClass}}{{continue}}{{end}}

{{- /* Build type parameter list */}}
{{- $typeParams := ""}}
{{- $typeParamList := ""}}
{{- range $i, $param := $model.TypeParams}}
    {{- $param = (typeparam $i $param)}}
    {{- if eq $i 0}}
        {{- $typeParams = $param}}
        {{- $typeParamList = (printf "<%s" $param)}}
    {{- else}}
        {{- $typeParams = (printf "%s,%s" $typeParams $param)}}
        {{- $typeParamList = (printf "%s, %s" $typeParamList $param)}}
    {{- end}}
{{- end}}
{{- if $typeParamList}}
    {{- $typeParamList = (printf "%s>" $typeParamList)}}
{{- end}}
{{- if $renderer.TS}}
    {{- if $hasTypes}},{{end}}
    {{jsid $model.Name}}
{{- else}}

/**
{{- if hasdoc $model.Decl.Doc}}
{{- jsdoc $model.Decl.Doc.Text ""}}{{if hasdoc $model.Doc}}
 *{{end}}
{{- end}}
{{- if hasdoc $model.Doc}}
{{- jsdoc $model.Doc.Text ""}}
{{- end}}
{{- if $typeParamList}}
 * @template {{$typeParams}}
{{- end}}
 * @typedef {$models.{{jsid $model.Name}}{{$typeParamList -}} } {{jsid $model.Name}}
 */
{{- end}}

{{- $hasTypes = true}}
{{- end}}

{{- if .TS}}
} from "./{{js $internal}}";
{{- end}}

{{- end}}
